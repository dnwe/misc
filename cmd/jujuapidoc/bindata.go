// Code generated by go-bindata.
// sources:
// jujugenerateapidoc/prog.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jujugenerateapidocProgGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x59\x7d\x6f\x1b\x39\x73\xff\x5b\xfa\x14\x13\x15\xbe\x5b\x05\xca\x6e\xda\x02\x2d\xa0\x46\x07\xe4\xc9\xcb\x3d\x46\xe3\x44\x38\xfb\xfa\xa0\x08\x82\x3b\x7a\x77\x76\xc5\x68\x97\xdc\x23\x29\xdb\x69\xce\xdf\xbd\x98\xe1\xcb\xae\x64\xd9\x71\x73\x0d\x10\x4b\x22\x87\x33\xc3\x99\xdf\xbc\x90\x2c\x0a\xb8\xd8\x20\x34\xa8\xd0\x08\x87\xa2\x97\x95\x2e\xa1\x37\xba\x31\xa2\x03\x69\xe1\x72\xa7\xaa\x16\x2b\x10\x16\x84\x02\x61\x2d\x3a\x90\xca\x69\xf8\xbc\xfb\xbc\xf3\xe4\xd3\xa2\x00\xab\xc1\x6d\x84\x83\x6b\x84\x4a\xab\x1f\x1d\x28\xc4\x0a\x9c\x06\x83\x1d\x76\x97\x68\xe8\x7b\xa9\xbb\x5e\xb6\xe8\x29\x83\x0c\x5a\x2c\x15\x68\x53\x79\x9a\xa8\x09\xb8\x0d\xb1\x2a\x6d\x3e\xed\x45\xb9\x15\x0d\x42\x27\xa4\x9a\xb2\x30\x44\x68\xa4\xdb\xec\x2e\xf3\x52\x77\x85\xd1\x4d\x8f\x7d\x8f\x05\xa9\x04\xcf\xff\xfd\xdf\x9e\x89\x5e\x5a\x34\x57\x68\x9e\xd5\xa2\x14\x15\x3e\x6b\xa5\x75\xcf\x2a\x74\x42\xb6\x76\x3a\x95\x5d\xaf\x8d\x83\x6c\x3a\x99\xa1\x2a\x75\x25\x55\x53\x7c\xb6\x5a\xcd\xa6\x93\x59\xdd\x39\xfa\x18\xb1\x27\xae\xfe\x4f\x62\x7b\x2f\x85\xe9\x4b\xfa\x6f\xb0\x6e\xb1\x3c\x64\x94\xf4\x14\xbd\x24\x53\x08\xc7\x52\xdd\x97\x1e\x2d\x93\xea\x42\x58\x17\xbe\xf5\xc2\xd8\x20\x48\x17\x4e\x6f\x51\xc5\xef\x03\x79\x2b\x54\x93\x6b\xd3\x14\x37\x85\xd3\xba\xb5\x45\xa3\x8b\x56\x8b\x2a\xae\xeb\xb7\x4d\x2e\x55\x81\xc6\x34\x3a\xbf\xfa\x67\x1a\xdc\xb8\xae\x2d\x1c\x76\x7d\x2b\x1c\xd2\x40\xab\x1b\xfa\xd0\xcc\x32\xe9\x7d\x64\x7f\x68\x8c\x36\xf6\xdb\xb6\x29\x4a\xdd\x75\xde\x96\xdf\x20\xf4\xbe\xb9\x97\xb0\x47\xd3\x49\x6b\xe5\x03\xbc\xac\x0b\xbb\x38\x66\xe5\x4e\xda\xb2\x28\xbb\xaa\x18\x90\x5a\xf8\x8f\x3d\xeb\x30\x23\x25\x3a\xb4\xf9\xd5\xbf\xcc\xa6\xf3\xe9\xb4\xde\xa9\x92\xc1\x96\xcd\xe1\xeb\x74\x22\x55\xad\x17\x80\xc6\xc0\x72\x95\xe0\x79\xaa\x6a\x9d\xcd\xa7\x13\x59\xf3\xcc\x93\x15\x28\xd9\x12\xf5\xa4\xd5\x4d\xfe\x56\x38\xd1\x66\x68\xcc\x7c\x3a\xb9\x9d\x4e\x2a\xe1\x44\xe2\x40\x2e\xcf\xcf\x84\xb1\x1b\xd1\x66\xc4\xfb\xb1\x5c\xb4\xcd\xcf\x5d\xa5\x77\x2e\xff\x87\x91\x0e\x33\xe2\xea\xd7\xb6\xa8\xb2\x5e\x28\x59\x6e\xb1\x9a\xc3\x4f\xf0\x3c\xb1\x58\x1b\xa9\x5c\x9d\xcd\x4e\xaa\xe2\xa4\x02\x6f\x70\x0b\x91\x16\xae\x37\xa8\xc0\x99\x2f\x52\x35\x14\x7b\x15\x3a\xb2\xb9\x42\x10\x65\x89\xd6\x42\xe6\x36\xd2\x52\x16\x50\xda\x74\xa2\x9d\xcf\x16\xfb\xb2\xfc\x4f\xd1\xb6\x6f\x99\xf3\x7b\xb2\xe2\x9c\xb5\xbd\x0d\x66\xdc\xb7\x17\x64\x4f\xbd\x07\xf2\xd3\x68\x54\x6d\xd8\xc8\x1e\x12\xeb\x6d\x43\x26\xfa\x76\xf4\x95\x35\x13\x7a\xb0\xe7\xaf\xb4\xaa\x65\x43\x7b\xbe\xf8\xd2\xe3\xab\x0d\x96\xdb\xb7\x3b\x55\xfe\x4d\x57\x12\xed\x12\x48\x91\xcc\x3a\x23\x55\x33\x87\x4b\xad\xbd\x85\x27\x06\xdd\xce\xd0\xf6\x77\x38\x9d\x4c\x6e\x17\xd3\xc9\xe4\x94\x13\xc3\x7a\xdb\xd8\x25\x74\xa2\xff\xe8\x17\x7d\xa2\x35\xbc\x24\x69\xb9\x84\x5a\xb4\x16\x17\x50\x14\xfe\x1b\x74\x28\x94\x0d\xb9\x8f\xd4\x02\x87\xd6\xd9\x3c\x72\x5e\x73\x38\x9f\xe9\x0a\x97\xe0\x43\x3b\xe7\xa1\x57\xba\xeb\x50\x39\xbb\x60\x17\x53\x4e\x4c\x40\x29\xeb\x26\x7f\xa7\x45\x75\x1c\x66\x41\x7b\x25\x5b\x5e\xd0\xe8\xfc\xbd\x76\x58\x13\x5c\x16\x30\x2b\x85\x52\x3a\x28\x72\xf2\xc7\x6c\x01\x49\x73\xf6\x8e\x07\x75\x44\x23\x67\x94\xfc\x3d\x5e\x47\x50\x57\x96\xa6\x92\xbd\xf3\x97\xd1\xc1\x36\x9b\xe7\xef\xa4\x75\xaf\x7d\x26\x0d\xb4\x44\xda\xa3\xaa\xb2\xca\x2e\xc6\xab\xaa\x4e\x2a\xbf\x2e\xd1\xe7\x79\x3e\x9f\x4e\x6a\x6d\xe0\xb7\x05\x54\x24\xc5\x08\xd5\x20\x54\x96\x37\xe5\x78\x24\xe5\xcf\xfc\xc3\xe5\x67\xf2\xe8\x87\x3a\xab\x72\xfa\x32\x9f\x4e\x27\x71\x35\x85\xec\xc0\xc0\xe5\x67\xe8\x36\xba\x62\x08\xfa\xb8\x9d\x4c\xba\x05\xfc\x46\x24\x71\x32\xa3\x35\x73\x9a\x91\x35\x74\xe4\x00\xd1\xd9\xb1\x51\x27\x6c\x17\x16\xc5\xb6\x88\x34\xbc\xe6\x36\x2d\xfc\x05\xed\xae\x75\x0f\x2f\xf4\x34\x69\xe1\x2d\xfb\x57\xf4\xf2\x34\x18\xfe\x87\x51\x20\x44\xe4\xd2\xf7\x25\x70\xbe\x61\xf2\x7b\xed\x54\x07\xff\x10\x03\x6f\xe1\xc8\x66\x42\x06\x58\x42\xf8\x57\xe5\xf4\x93\xf0\x37\xf9\x2f\x34\x94\x4a\x97\x61\x3c\xfc\xe4\xa9\x97\x57\x42\xb6\xe2\xb2\xc5\x0b\xbd\x04\x31\xfc\xc8\xc2\x72\xa8\x48\x88\xd3\xe6\xcb\x7c\xe1\xb7\x32\xe9\x5d\x82\x29\x61\x96\x94\xcf\x3c\x78\xa3\xa3\x26\x47\x30\xfb\x38\xd0\x36\xe8\x9b\x03\x20\x5c\x02\xd9\xe0\xe4\x6a\x36\x66\x4c\x0a\xb8\x4a\x97\x49\x05\x22\x7c\xad\xcb\x10\x4b\x41\x91\xde\xfd\x55\x25\xa8\x13\x2a\x3d\xcf\xa0\xc6\xf2\x98\x2a\x75\xfe\x5a\x97\xb0\x02\x52\xe9\x51\x18\xfe\xff\x81\x70\xdd\x8d\x40\xe0\x27\x3d\x12\x3d\x02\x54\x74\xfc\xed\x83\x78\xaf\xc3\x30\xac\x18\x77\xf9\x2f\x58\xff\x5f\x50\x5f\xa7\xe1\xbd\xf5\x07\xe0\x9f\x74\x63\x6f\x75\xac\xeb\x11\x7f\x79\x83\xc4\xf8\x3c\x74\xdb\x5f\xf1\x5b\x7e\xe0\xba\x91\xa4\x5b\x6f\xcb\xe0\xc3\xce\xfb\x70\x52\x07\x8b\x8e\x92\x5b\x1a\x5a\x40\xdd\x45\xdf\x87\x80\x0e\x41\x38\xa2\x3e\x98\x58\x40\xed\x8b\x78\xd8\x44\x98\x5e\xd0\x6e\xa8\x56\x5e\x09\x03\xae\xeb\x5b\x2a\x5b\xc4\x25\x76\x68\x39\x0d\x9c\x89\xfe\xeb\x74\x32\x23\x94\xbf\x93\x6a\x3b\x0b\x15\xcd\xc1\xd3\x21\x7b\x33\xb2\x86\x65\x7f\xbf\x38\x7b\xc7\x66\x93\x35\x38\x58\xdd\x45\xff\x4c\x15\x62\x16\x36\xd1\x4a\xb5\x25\xc7\xd4\x9d\xcb\xcf\x7b\xdf\x31\xfc\xfe\x42\xc0\xc6\x60\xbd\x9a\x6d\x9c\xeb\xed\xb2\x28\x1a\x4d\x40\xa3\x6e\xf3\xc4\xce\x7e\x3a\xb1\x2f\x0a\xf1\xd3\xef\x0b\x70\x21\x47\xf8\x4f\xfe\x93\x51\x0b\x90\xca\xeb\x58\xa5\x8c\x44\x91\x21\x16\xa9\x41\x38\x8a\x06\x78\x1a\x2a\xfb\xda\x1f\x12\x16\xe0\x38\x56\x9e\x0e\x9b\xf5\x52\xbb\x14\x31\x10\x0b\x7c\xa8\xf4\xe3\xe6\x82\x43\x92\x39\xf0\xd2\x50\x50\x9f\x78\x66\xa7\xf6\x54\x39\x34\xb5\x28\x31\x73\x3e\xea\x8a\x02\x7e\xb5\xfe\x04\xd2\x6b\x49\xb3\x3e\x17\xf1\xf1\xc4\xd1\x51\xa8\x13\xea\x4b\x10\x6e\xe9\x77\xaf\xad\x95\x97\x2d\xe6\x9c\x00\x7c\x46\xe2\x92\xba\xf6\xeb\x33\x17\xea\x6e\x47\xe7\xa7\xe5\x88\xc0\x83\xea\x1c\x1d\x93\x58\x6c\x39\x44\x2c\xba\xfc\x9d\xd6\xdb\x5d\x9f\x31\xde\x87\x7d\x7a\xdd\x89\x6e\x75\xa7\x19\x98\xcd\x52\x64\xe0\x75\x9d\xc5\x98\xa8\xa5\xaa\x02\x07\x38\xb9\x02\xad\x7c\x28\x0c\x3c\x17\xe0\x42\x8b\x79\xf9\x99\xc4\x5b\x6c\x29\x6d\x71\x79\xc7\xb2\x4d\x91\x4b\x8c\x5e\x63\xd9\x86\x88\xd5\x97\x9f\xf3\xb5\xb6\xec\xee\x7b\x1b\x94\x41\xa7\x33\x61\xb7\x43\x37\x6b\xaf\xa5\x2b\x37\x40\xfc\x89\x35\x7d\xe6\x99\x63\x14\x7f\x9d\x4e\x4a\x61\x11\x9e\x0a\xeb\xf2\x9f\x51\x91\xc8\xa5\xc7\x32\x93\x5d\xe8\x2d\x09\xe2\x43\x51\x7e\xf1\xdf\xeb\x37\xfb\xc8\x3e\x30\x42\xad\x77\xaa\x02\xa5\xd5\x33\xf6\x21\x0b\x3c\xf9\x27\xce\x05\x58\xb6\x29\x89\xfb\x8c\x6c\x7b\x2c\x47\xd5\x96\xa4\x9d\xf7\x58\xfa\xaa\x3b\x71\x71\x9a\x3e\xf3\x8c\xf5\x23\x40\x11\x89\x4f\x5b\xde\xb7\x3c\x4d\x13\x81\x26\x01\x2c\xe6\xff\x28\xae\x1b\x64\xc9\x98\xe1\x2d\x77\x58\x31\xbf\x7a\x3a\x39\x6a\x01\x3a\x8e\xb1\xa0\x11\x1b\x45\x56\xde\x0d\x84\x88\xe4\x93\x38\x1f\xcd\xc2\x19\x2e\xbf\xc0\x1b\x97\xcd\x7d\xda\xe1\x59\x4e\x7f\xfe\x6f\x68\x53\xee\xb3\x63\x00\x50\x85\xb5\x54\xd2\x49\xad\x80\xb1\xc5\xd6\x95\x8a\x01\x3d\x9b\x8f\x3d\x47\xa9\xeb\xd0\x75\x9c\x23\xbc\x7e\x4f\xee\x28\xfb\x1d\x82\x33\xe1\xc8\x99\x74\x30\x21\x4c\xe6\x6f\x29\x70\xd6\xda\x32\x5d\x36\x00\x74\xbe\xbf\x37\xd6\xe5\x8e\x3d\x2a\xac\xc5\xae\x75\xcb\xfb\x6d\xb0\x53\x78\xd3\x63\xe9\xb0\x62\x16\xc2\x08\xd6\xe7\xe4\xc2\xab\x33\x60\x6a\x38\x00\x1d\xe9\x4d\x8e\x64\xb7\xc3\xcc\x76\x34\x8d\x3d\x14\x8b\xee\xfb\x23\xd1\x79\xbe\x7a\x3b\xc4\xe1\x38\xf2\x42\xb2\xd4\x5b\xf8\xf3\x4f\x70\x0f\x04\xe0\xf7\xc6\xdf\xd0\xe8\xee\x47\x9f\x3b\x08\xbf\x6f\x45\x1f\x95\x3a\x9e\x1a\x81\x6c\xb5\x8a\x96\xf1\x10\x4b\x34\x54\xee\x8f\x75\x17\x69\xf6\x30\x54\x6e\xc7\x47\xc6\xe3\xf8\x09\x4d\xfe\x23\x92\x71\xb2\x44\x40\xd0\x6c\x4e\x78\xa1\xb3\x64\xf0\x2a\x78\x26\x96\x6b\x90\xd3\x3d\xb4\x78\x85\xed\x1e\xe8\xf8\x12\xad\xd4\xca\x09\xe9\xe9\x68\x7d\x23\xaf\x50\x51\x35\xe2\x00\xc8\x3d\x04\xf7\xa0\x72\x17\x7c\xbd\xb6\xc1\x95\x6b\x6d\xe7\x90\x91\x5d\x5f\x47\xa8\xc5\x0a\xaa\xb7\x6f\x65\x8b\xb1\xdf\xf7\x71\x46\x23\x59\xaf\xad\x47\x48\x24\xb9\x5b\x96\xc6\x1d\x1b\x9b\x42\x69\xa8\x89\xd4\x43\x83\x9c\xaf\x2f\x3f\x63\xe9\x66\x01\x0d\xb2\xc5\xd8\x1a\x07\xae\xa1\xaf\x48\x48\xe9\xb7\x4d\x3c\x48\x79\xb0\xb0\x56\x2f\xdb\x76\xed\xef\x0a\xc3\x31\xc9\x13\xd7\x23\x32\xbf\x8e\x55\xb7\x03\x24\xee\xdd\x5d\x1d\xc2\xea\x3f\x0e\xb7\x47\xb1\xb0\xa7\x1a\xa1\x29\x29\xee\x21\x45\xce\x91\x8a\x6f\x17\x3c\x7c\x8a\x02\xfe\x81\x3f\x5e\xc5\x8d\x93\x6f\xd9\x0e\xd7\xf8\xa3\x41\x68\xb5\xde\x4a\xd5\x90\x3d\x72\x78\xaf\xaf\xc1\x19\x71\x85\xc6\x22\x88\xb6\x0d\xcb\x8f\x42\xc1\x8e\x97\x32\x57\x23\x9b\x8d\xe3\x2e\x91\xa1\x32\xa2\xcd\x47\xd5\x27\xd6\x5e\x6f\x9a\x9a\x9d\x1e\xeb\x4a\x4c\xd8\x3e\x76\x5e\xac\x18\x25\x3f\xfc\xc0\x1f\x2f\x42\x9a\x78\xa3\xaa\xa1\xce\x8c\x32\xeb\x50\x5e\x6e\xf7\x8f\xbf\xf7\xe1\x61\x0c\xeb\x94\xdb\x53\x4c\xc4\x03\xe6\x5e\x4c\xc4\x8b\xd0\xe1\x90\xc8\xa3\x0c\xff\x78\xf2\xe2\x4e\x9f\x38\x5c\x6f\x64\xb9\x81\x6e\x67\x1d\x18\xec\x0d\x5a\x3a\x19\x08\x3e\x03\xf8\xcc\xd4\x1b\xf4\x3a\x60\x05\x3f\x6b\xe6\x19\x62\x67\xef\x74\x7b\x2c\x71\x8f\x85\xcd\x21\xbb\xd3\xa1\x0e\x31\x44\x40\xcb\xff\x53\xb2\xd1\x56\xab\xb4\x70\xed\x4c\xb8\xfb\xa0\x5c\xf5\xa6\xc5\x2e\x0b\x79\x39\xf0\xf0\xc7\xbf\x18\x00\xc4\x25\x4e\xac\x56\x30\x9b\x3d\x18\x69\x6c\x9d\x93\x70\x85\xe7\xfc\x8e\x67\xa9\xdd\xeb\xb7\xcd\x5a\xb8\x8d\x17\xb0\xf6\x3f\x82\x8c\x38\x35\x88\x28\x0a\xb8\xf8\xf0\xfa\x03\x94\x7a\xd7\x56\x10\x33\x21\xef\xf6\x6f\xc2\x4a\x5f\xe9\x60\x83\x06\x41\xd6\x70\x8d\xfc\x02\xc0\x6f\x00\xf9\x23\x14\x24\xed\x92\x0b\xa4\x82\x70\xe7\xbf\xa7\x6b\x8c\x78\x8e\xd1\x10\xe8\x59\x50\x34\x69\xcd\x44\x8f\xc8\x41\xe3\x74\x7c\xf2\x07\x89\xf4\xaf\x02\x58\x41\xa9\x2b\x12\x3c\x70\xf6\xe2\x59\x74\xc8\x1f\xeb\x6d\x93\xba\xe5\x7e\xdb\xe4\xe7\xa5\xa6\x73\x45\xec\xd9\xa3\x87\xbc\x56\x44\xf7\x08\x8d\xc6\xa6\x48\x6d\xd5\x89\x25\x13\x24\x34\xed\xe9\xa4\xfd\xcd\x82\x9f\xf1\xe5\x9b\x3a\x9e\x43\x0c\x0e\x05\xfc\x21\xe9\x03\x48\x84\xef\xe5\x06\xb1\x7b\x27\xd7\x3d\xa1\xe1\xf4\xca\x91\x32\xbe\x38\xaa\xd3\x75\x30\xc4\x36\xa6\xf6\x37\x48\xe1\x0e\x3a\x5d\x28\xc1\xc7\x4f\x9e\x82\x94\xa3\x53\xb0\x48\x23\x3e\xd9\xcb\x05\x6c\xa5\xaa\xce\x9d\x19\x52\x15\x0d\xd8\x78\xbc\x95\x36\xdd\x5f\x8d\xe4\x26\x81\x0b\x40\xe5\xa4\xfb\xc2\x81\x27\xe7\x21\x5f\x89\xd1\x49\x3d\x09\x98\x1f\x26\x2a\x11\x8f\xe6\xd9\x74\xb2\x7f\xc9\x0d\x2b\xe8\xc4\x16\xb3\x83\x4b\xe2\xf9\x74\x92\xee\xd6\xfd\xbf\xfb\xe8\xe2\x33\xc3\x71\xed\xbf\x61\x35\xaf\xf1\x68\x63\x73\xc8\xf4\x96\xaf\xb6\x63\xa6\x89\x0b\x47\xb8\x2b\x0a\xe0\x2b\xd9\xc0\x0c\xb4\x6a\xbf\x8c\x42\xd3\xdf\x83\xdf\xf2\x6a\x66\xbf\x5a\xf1\xe7\x2b\xad\x9c\xd1\x6d\x8b\xe6\x57\x8b\x86\x6a\xc0\x93\xe1\x8e\xf7\xd4\x0e\xd3\xde\x3c\xa3\x5d\xcc\xc7\x80\xe3\x5b\xf2\x63\xfc\xcf\x74\x85\xed\x51\xd6\x3c\xf3\x58\xae\xfb\xfe\xf9\x38\xd0\x7f\xa2\xbc\xca\x7b\xab\xb0\x46\xe3\xef\x4e\x3c\x93\xd0\x4a\x1b\x2c\xf5\x15\x9a\x6c\x74\x5f\x78\xf7\xc6\x24\x1c\x20\x8a\x02\xc6\xef\x2a\xec\x6d\x3a\x51\x07\x9b\x9e\xfc\xb1\x00\xa3\x5b\xa4\x73\x76\x76\x72\x35\x5f\xfa\x00\x1e\xe3\x92\xf6\xcc\xa1\x47\x05\xf8\x72\xd7\xe4\xaf\x04\x59\xcf\x66\xcf\x17\xf0\xaf\xcf\xf9\xa4\x12\x31\x74\x74\x17\x13\xbd\x4d\xdf\x6f\x49\xe7\xd2\xdd\xf0\x73\x81\x56\x0e\x6f\x1c\xa9\x2c\x76\x6e\xb3\x04\xfa\xab\x8d\xfc\x1f\x34\xbc\x0d\x92\xbb\xf4\xd2\xc3\xa3\xc4\xed\x74\xf2\xdb\x70\x9e\xf0\x80\xc9\x4a\x77\x33\x4f\x01\xe0\xdf\xfc\xf2\x57\x62\x67\x91\x0f\x0c\xd4\xe5\xf8\xf7\xbd\xfc\x8d\x31\x6b\x34\x1d\x85\x08\x67\xae\x01\x8d\x20\x95\x9b\x4e\x4b\xad\x2c\xbf\xb1\xee\x83\xe8\x4c\x94\x1b\xa9\x10\x56\x7b\x71\xa9\xf9\x29\x8b\xe1\xe0\xe7\x5f\x36\xa8\x9c\x1f\xf9\x55\x49\x37\xfa\xb9\x8f\xc7\xb0\x28\x62\x28\xc5\x55\xb6\xdd\x0b\x8f\x73\x8e\xa7\x6c\x0e\x43\xb2\x09\x5b\xe4\x5c\xf2\x71\xfb\x29\x86\xba\xcf\x2d\xab\x94\x85\xbe\xde\xb3\x81\x25\xcc\xca\x34\xf6\xac\xf3\x83\xcf\x04\xe9\x39\x5b\xdc\xdd\x4a\xb8\x92\x9f\x1d\x25\x4c\x3b\x4c\x17\xf7\x30\xdb\x29\xe9\xf6\xa9\xf6\x37\xce\xa4\x63\x15\x76\x16\x4d\x92\x1c\xed\x31\x62\xd8\xd1\x58\xa4\x8a\x4e\x0b\xa0\x21\xb3\xec\x4a\xbe\x74\x20\xd4\x8c\xa0\x33\x9d\x84\xd4\xf3\xca\x53\xa6\x74\x9f\x95\x71\xf1\x1c\x5e\xee\xa8\x6f\x88\x49\xea\x65\x5a\x3c\x32\x73\x99\x13\xcf\xa3\xab\x4f\x5f\x1f\xf3\xcb\x6c\x76\x94\xf8\xdc\x09\x47\xdd\xf6\x53\x7e\xfa\xcd\xf9\xe7\x68\x95\xc2\xeb\x6c\x34\x33\x3f\xca\xe3\x17\xb4\x7a\x67\x4a\xbe\x64\x0f\x3a\xa7\xa1\x31\xaf\x51\x71\xbb\xa3\xc2\x5a\xeb\xf6\x40\x8d\x75\x78\x59\x3c\xae\xca\x9a\xd3\xfe\x31\x7e\x83\x5f\x2f\x04\x41\xd4\xbf\x45\xef\x8d\x8e\xd9\xf2\xec\x7b\xbc\xde\x5f\x36\xbb\xb9\xb9\xb9\xf1\x2d\x33\x3b\x76\xf0\xe0\xc8\xb7\x77\x1c\xe4\xd1\x32\x8a\x94\x41\x41\x31\x62\xe1\x3d\x3c\x08\xcc\x86\x67\xd4\x58\x29\xf3\xe3\x25\x23\x84\xc0\x7d\x6c\xff\x2e\xec\x3a\xbd\xf2\x67\xba\xc7\x70\x08\x18\x9e\xfe\xf3\x97\xfc\x12\xbd\x00\x27\x4c\x83\x2e\x6c\xff\x42\x34\x73\xc8\x48\x87\x71\x83\x3d\x2a\x64\xfb\xad\xc9\x91\xcd\x8c\x63\xf3\x5b\xdb\x19\xd3\xd2\xc1\xef\x3b\x37\x4b\x62\x53\xa4\x7f\x4b\xe6\x90\xf4\x1e\xf2\x48\x2b\x1f\xc1\xea\xa0\x80\xdf\xd9\xc0\x90\x3c\xef\x11\xf5\x33\x3a\x92\x36\x46\x67\xc0\x64\xb8\xc4\x0d\xfc\xe2\xbd\xed\x5d\xa1\x8b\x7d\x41\xa3\x1b\xb6\x04\x67\x1a\x67\x20\x5f\xea\xcb\x74\x8f\xb8\x9f\x1c\x8f\xad\x52\xd2\x05\xf8\x17\xcf\xf7\x96\x8d\x9d\xb6\x38\xee\xa8\x63\x0c\xc3\x14\xf3\x7c\x1e\xee\x23\xb8\x1c\x67\xb3\x9d\xda\x2a\x7d\xed\x2b\x06\x47\xda\xff\x06\x00\x00\xff\xff\xc6\xe0\xbd\x34\x3c\x25\x00\x00")

func jujugenerateapidocProgGoBytes() ([]byte, error) {
	return bindataRead(
		_jujugenerateapidocProgGo,
		"jujugenerateapidoc/prog.go",
	)
}

func jujugenerateapidocProgGo() (*asset, error) {
	bytes, err := jujugenerateapidocProgGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jujugenerateapidoc/prog.go", size: 9532, mode: os.FileMode(436), modTime: time.Unix(1494589875, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"jujugenerateapidoc/prog.go": jujugenerateapidocProgGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"jujugenerateapidoc": &bintree{nil, map[string]*bintree{
		"prog.go": &bintree{jujugenerateapidocProgGo, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

